//require("jquery");
require("bootstrap");
require("jscrollpane");

$(document).ready(function() {

    $(document).on('click', '.slide-left', function () {
        var el = $(this).parent().parent().find('.nav');
        slideNav(el, "left");
    });

    $(document).on('click', '.slide-right', function () {
        var el = $(this).parent().parent().find('.nav');
        slideNav(el, "right");
    });

    $(document).on('click', '.content-slide-left', function() {
        var el = $(this).parent().parent().find('.block-part-container');
        slideNav(el, "left", 1000);
    });

    $(document).on('click', '.content-slide-right', function() {
        var el = $(this).parent().parent().find('.block-part-container');
        slideNav(el, "right", 1000);
    });
    
    // Delete contents input
    //$(document).on('click', '.form-input-delete', function() {
    //    $(this).siblings('input').val('');
    //});

    //$(document).on('click', ".select-all-date", function(e) {
    //    var target = $(this).parent().attr('id');
    //    $('#rangeDatepicker').modal({show:true})
    //    $('#rangeDatepicker').attr('data-target', target);
    //});
    
    //$(document).on('click', ".employee-modal", function(e) {
    //    var target = $(this).parent().attr('id');
    //    $('#amountEmployees').modal({show:true})
    //    $('#amountEmployees').attr('data-target', target);

    //    // find data if already set
    //    var employee_min = $(this).parent().find('input[name*=employee_min]').val();
    //    var employee_max = $(this).parent().find('input[name*=employee_max]').val();

    //    if(typeof employee_min != "undefined" && employee_min != '') {
    //        $("#employee_min").val(employee_min);
    //    } else {
    //        $("#employee_min").val('');
    //    };
    //    if(typeof employee_max != "undefined" && employee_max != '') {
    //        $("#employee_max").val(employee_max);
    //    } else {
    //        $("#employee_max").val(employee_max);
    //    };
    //});

    //$(document).on('click', "#employee-reset", function() {
    //    $('#employee_min').val('');
    //    $('#employee_max').val('');
    //});

    //$(document).on('click', ".employee-save", function () {
    //    var target = $('#amountEmployees').attr('data-target');

    //    // set vars
    //    $('#'+target).find('input[name*=employee_min]').val($("#employee_min").val());
    //    $('#'+target).find('input[name*=employee_max]').val($("#employee_max").val());
    //});

    //$(document).on('click', ".search-modal", function(e) {
    //    var target = $(this).parent().attr('id');
    //    $('#search').modal({show:true})
    //    $('#search').attr('data-target', target);

    //    // find data if already set
    //    var searchterm = $(this).parent().find('input[name*=searchterm]').val();

    //    if(typeof searchterm != "undefined" && searchterm != '') {
    //        $("#searchterm").val(searchterm);
    //    } else {
    //        $("#searchterm").val('');
    //    };
    //});

    //$(document).on('click', ".search-save", function() {
    //    var target = $('#search').attr('data-target');

    //    // set vars
    //    $('#'+target).find('input[name*=searchterm]').val($("#searchterm").val());
    //});

    //$(document).on('click', ".buffer-modal", function(e) {
    //    var target = $(this).parent().attr('id');
    //    $('#bufferKm').modal({show:true})
    //    $('#bufferKm').attr('data-target', target);

    //    // find data if already set
    //    var bufferSize = $(this).parent().find('input[name=bufferSize]').val();

    //});

    //$(document).on('click', ".btn-confirm", function(e) {
    //    e.preventDefault();
    //});
    
    //$(document).on('click', '.modal-test-selection', function(e) {
    //    e.preventDefault();
    //    e.stopPropagation();
    //    $('#testSelection').modal({show:true});
    //});

    $('#testSelection').on('show.bs.modal', function (e) {
        setTimeout(function(){
            var element = $('.scroll-pane').jScrollPane();
            var api = element.data('jsp');
            api.reinitialise();
        }, 500);
    });

    $('.scrollpane').jScrollPane();

    // Replace by http://l-lin.github.io/angular-datatables
    //var resultTable = $('#resultTable').DataTable( {
    //    "scrollY":        "400px",
    //    "scrollCollapse": true,
    //    "paging":         true,
    //    "pageLength":     50,
    //    "pagingType":     "full_numbers ",
    //    "sDom":           "rtp",
    //    "bScrollCollapse": false,
    //    "fnInitComplete": function() {
    //        var element = $('.dataTables_scrollBody').jScrollPane();
    //        this.jScrollpaneApi = element.data('jsp');
    //        $('#resultTable').not('.initialized').addClass('initialized').dataTable()
    //    },
    //    "fnDrawCallback": function(){
    //        if($('#resultTable').hasClass('initialized')) {
    //            this.jScrollpaneApi.reinitialise();
    //        }
    //    },
    //    'columnDefs': [{
    //        'targets': 0,
    //        'searchable': false,
    //        'orderable': false,
    //        'className': 'dt-body-center',
    //        'render': function (data, type, full, meta){
    //            return '<div class="form-group"><div class="form-check"><label class="form-check-label"><input type="checkbox" class="form-check-input" name="id[]" value="' + $('<div/>').text(data).html() + '> <span></span> </label></div></div>';
    //        }
    //    }],
    //    "oLanguage": {
    //        "oPaginate": {
    //            "sFirst": "<i class='icon icon-double-arrow-left'></i>",
    //            "sLast": "<i class='icon icon-double-arrow-right'></i>",
    //            "sPrevious": "<i class='icon icon-arrow-left-big'></i>",
    //            "sNext": "<i class='icon icon-arrow-right-big'></i>"
    //        } // the other pagination strings ('page'/'of') are hardcoded in plugin
    //    },
    //    "order": [[ 0, "asc" ]]
    //} );
    //// update column widths, the scrollbar changed tbody only
    //resultTable.columns.adjust().draw();

    // Replace by http://l-lin.github.io/angular-datatables
    //var usersTable = $('#usersTable').DataTable( {
    //    "scrollY":        "500px",
    //    "scrollCollapse": true,
    //    "paging":         true,
    //    "pageLength":     20,
    //    "pagingType":     "full_numbers",
    //    "sDom":           "rtp",
    //    "bScrollCollapse": false,
    //    "fnInitComplete": function() {
    //        var element = $('.dataTables_scrollBody').jScrollPane();
    //        this.jScrollpaneApi = element.data('jsp');
    //        $('#usersTable').not('.initialized').addClass('initialized').dataTable()
    //    },
    //    "fnDrawCallback": function(){
    //        if($('#usersTable').hasClass('initialized')) {
    //            this.jScrollpaneApi.reinitialise();
    //        }
    //    },
    //    "oLanguage": {
    //        "oPaginate": {
    //            "sFirst": "<i class='icon icon-double-arrow-left'></i>",
    //            "sLast": "<i class='icon icon-double-arrow-right'></i>",
    //            "sPrevious": "<i class='icon icon-arrow-left-big'></i>",
    //            "sNext": "<i class='icon icon-arrow-right-big'></i>"
    //        } // the other pagination strings ('page'/'of') are hardcoded in plugin
    //    },
    //    "order": [[ 0, "asc" ]]
    //} );
    //// update column widths, the scrollbar changed tbody only
    //usersTable.columns.adjust().draw();

    //var listsTable = $('#listsTable').DataTable( {
    //    "scrollY":        "250px",
    //    "scrollCollapse": true,
    //    "paging":         true,
    //    "pageLength":     10,
    //    "pagingType":     "full_numbers",
    //    "sDom":           "rtp",
    //    "bScrollCollapse": false,
    //    "fnInitComplete": function() {
    //        var element = $('.dataTables_scrollBody').jScrollPane();
    //        this.jScrollpaneApi = element.data('jsp');
    //        $('#listsTable').not('.initialized').addClass('initialized').dataTable()
    //    },
    //    "fnDrawCallback": function(){
    //        if($('#listsTable').hasClass('initialized')) {
    //            this.jScrollpaneApi.reinitialise();
    //        }
    //    },
    //    'columnDefs': [{
    //        'targets': 0,
    //        'searchable': false,
    //        'orderable': false,
    //        'className': 'dt-body-center',
    //        'render': function (data, type, full, meta){
    //            return '<div class="form-group"><div class="form-check"><label class="form-check-label"><input type="checkbox" class="form-check-input" name="id[]" value="' + $('<div/>').text(data).html() + '> <span></span> </label></div></div>';
    //        }
    //    }],
    //    "oLanguage": {
    //        "oPaginate": {
    //            "sFirst": "<i class='icon icon-double-arrow-left'></i>",
    //            "sLast": "<i class='icon icon-double-arrow-right'></i>",
    //            "sPrevious": "<i class='icon icon-arrow-left-big'></i>",
    //            "sNext": "<i class='icon icon-arrow-right-big'></i>"
    //        } // the other pagination strings ('page'/'of') are hardcoded in plugin
    //    },
    //    "order": [[ 0, "asc" ]]
    //} );
    //// update column widths, the scrollbar changed tbody only
    //listsTable.columns.adjust().draw();

    // prevent user from scrolling with their mouse in scrollable blocks
    $('.has-scroll, .nav-wrap').on('scroll mousewheel touchmove', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    });

    
    // remove filter group in search
    // todo: Replace animations with angular animations
    //$(document).on('click', '.filter-group .btn-close', function() {
    //    $(this).parent().fadeOut();
    //    $(this).parent().next().fadeOut();
    //});
});

function slideNav(el, direction, speed) {
    var width = el.width();
    var animSpeed = (speed > 0) ? speed : 300; //  = slide px per second
    var operator = (direction=="left") ? "-" : "+";

    // Make sure last visible item is completely visible
    var scrollLeft = el[0].scrollLeft + el.width() + el.width();
    if (direction == 'left') {
        scrollLeft = el[0].scrollLeft - el.width();
    }
    var extra = 0;

    el.find('li').each(function(index) {
        var itemOffsetLeft = this.offsetLeft;

        if (direction == 'left' && itemOffsetLeft < scrollLeft && itemOffsetLeft + this.clientWidth > scrollLeft) {
            extra = scrollLeft - itemOffsetLeft;
        }
        if (direction == 'right' && itemOffsetLeft < scrollLeft && itemOffsetLeft + this.clientWidth > scrollLeft) {
            extra = (itemOffsetLeft + this.clientWidth)-scrollLeft;
        }
    });

    el.stop();
    el.animate({
        scrollLeft: operator+"="+(width+extra)+"px"
    }, (width / animSpeed) *1000);


}
