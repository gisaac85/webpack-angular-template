/* requires const */
const path = require('path');
const webpack = require('webpack');

/* constants */
const root = path.resolve(__dirname, '..');

/* plugins */
const HardSourceWebpackPlugin = require('hard-source-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

console.log('@@@@@@@@@ USING DEVELOPMENT @@@@@@@@@@@@@@@');

module.exports = {
    mode: "development",
    devtool: 'source-map',
    entry: {
        'polyfills': './demo/polyfills.ts',
        'app-client': [
            './demo/boot.browser.ts',
            './src/js/olbico.js',
            './src/sass/screen.scss',
            './src/icons/build-templates/olbico-icons.font.js'
        ]
    },
    resolve: {
        extensions: [".ts", ".js"]
    },
    optimization: {
        splitChunks: {
            cacheGroups: {
                commons: {
                    test: /[\\/]node_modules[\\/]/,
                    name: "vendors",
                    chunks: "all"
                }
            }
        }
    },
    /* configure development server */
    devServer: {
        historyApiFallback: true,
        contentBase: path.join(root, '/wwwroot/'),
        watchOptions: {
            aggregateTimeout: 300,
            poll: 1000
        }
    },
    module: {
        rules: [
            { test: /\.tsx?$/, exclude: /node_modules/, include: /demo/, use: ['ts-loader', 'angular-router-loader', 'angular2-template-loader'] },
            { test: /\.font\.js/, use: [MiniCssExtractPlugin.loader, 'css-loader', 'webfonts-loader']},
            { test: /\.(png|jpg|gif|svg|eot)$/, use: 'file-loader?name=assets/[name]-[hash:6].[ext]' },
            { test: /\.woff(\?v=\d+\.\d+\.\d+)?$/, loader: "file-loader?name=assets/[name]-[hash:6].[ext]&mimetype=application/font-woff" },
            { test: /\.woff2(\?v=\d+\.\d+\.\d+)?$/, loader: "file-loader?name=assets/[name]-[hash:6].[ext]&mimetype=application/font-woff" },
            { test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: "file-loader?name=assets/[name]-[hash:6].[ext]&mimetype=application/octet-stream" },
            { test: /favicon.ico$/, use: 'file-loader?name=/[name].[ext]' },
            {
                test: /\.(scss|css)(\?|$)/,
                loaders: ['to-string-loader'].concat(
                    MiniCssExtractPlugin.loader,
                    'css-loader?sourceMap',
                    {
                        loader: 'sass-loader',
                        options: {
                            "includePaths": [
                                path.join(root, '/src/sass/')
                            ],
                            sourceMap: true
                        }
                    }
                )
            },
            { test: /\.html?$/, use: ['raw-loader'] }
        ]
    },
    plugins: [
        new MiniCssExtractPlugin({
            filename: 'dist/[name].bundle.css'
        }),
        new HardSourceWebpackPlugin({
            cacheDirectory: '../node_modules/.cache/hard-source/[confighash]',
            configHash: function (webpackConfig) {
                return require('node-object-hash')().hash(webpackConfig);
            },
            environmentHash: { root: process.cwd(), directories: ['node_modules'], files: ['package.json'] }
        }),
        function () {
            this.plugin('watch-run',
                function (watching, callback) {
                    console.log('\x1b[33m%s\x1b[0m', `Begin compile at ${(new Date()).toTimeString()}`);
                    callback();
                });
        },
        new webpack.ProvidePlugin({
            $: 'jquery',
            jQuery: 'jquery',
            'window.jQuery': 'jquery'
        }),
        new webpack.ContextReplacementPlugin(/\@angular\b.*\b(bundles|linker)/, path.join(__dirname, './demo')), // Workaround for https://github.com/angular/angular/issues/11580
        new webpack.ContextReplacementPlugin(/angular(\\|\/)core(\\|\/)@angular/, path.join(__dirname, './demo')), // Workaround for https://github.com/angular/angular/issues/14898
        new webpack.ContextReplacementPlugin(/\@angular(\\|\/)core(\\|\/)esm5/, path.join(__dirname, './demo')), // Workaround for https://github.com/angular/angular/issues/20357
        new webpack.IgnorePlugin(/^vertx$/), // Workaround for https://github.com/stefanpenner/es6-promise/issues/100
        new CopyWebpackPlugin([
            { from: './demo/images/*.*', to: 'assets/', flatten: true }
        ])
    ],
    /* where to export */
    output: {
        path: root + '/wwwroot/',
        filename: 'dist/[name].bundle.js',
        chunkFilename: 'dist/[name].chunk.js',
        publicPath: '/'
    }
}